<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ContainerExpressions</name>
    </assembly>
    <members>
        <member name="T:ContainerExpressions.Containers.Either`2">
            <summary>
            This type holds a single instance of a selection of types.
            <para>While Either can take on more than one type, it is only ever a single type at a time.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`2.#ctor(`0)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`2.#ctor(`1)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`2.Match``1(System.Func{`0,``0},System.Func{`1,``0})">
            <summary>
            Gets a type that each type of Either can transform to.
            <para>Only one function will be invoked depending on what type is internally stored.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`2.op_Implicit(`0)~ContainerExpressions.Containers.Either{`0,`1}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`2.op_Implicit(`1)~ContainerExpressions.Containers.Either{`0,`1}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`2.ToString">
            <summary>Returns the underlying type's value's string representation.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Either`3">
            <summary>
            This type holds a single instance of a selection of types.
            <para>While Either can take on more than one type, it is only ever a single type at a time.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`3.#ctor(`0)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`3.#ctor(`1)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`3.#ctor(`2)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`3.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0})">
            <summary>
            Gets a type that each type of Either can transform to.
            <para>Only one function will be invoked depending on what type is internally stored.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`3.op_Implicit(`0)~ContainerExpressions.Containers.Either{`0,`1,`2}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`3.op_Implicit(`1)~ContainerExpressions.Containers.Either{`0,`1,`2}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`3.op_Implicit(`2)~ContainerExpressions.Containers.Either{`0,`1,`2}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`3.ToString">
            <summary>Returns the underlying type's value's string representation.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Either`4">
            <summary>
            This type holds a single instance of a selection of types.
            <para>While Either can take on more than one type, it is only ever a single type at a time.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.#ctor(`0)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.#ctor(`1)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.#ctor(`2)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.#ctor(`3)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0})">
            <summary>
            Gets a type that each type of Either can transform to.
            <para>Only one function will be invoked depending on what type is internally stored.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.op_Implicit(`0)~ContainerExpressions.Containers.Either{`0,`1,`2,`3}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.op_Implicit(`1)~ContainerExpressions.Containers.Either{`0,`1,`2,`3}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.op_Implicit(`2)~ContainerExpressions.Containers.Either{`0,`1,`2,`3}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.op_Implicit(`3)~ContainerExpressions.Containers.Either{`0,`1,`2,`3}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`4.ToString">
            <summary>Returns the underlying type's value's string representation.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Either`5">
            <summary>
            This type holds a single instance of a selection of types.
            <para>While Either can take on more than one type, it is only ever a single type at a time.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.#ctor(`0)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.#ctor(`1)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.#ctor(`2)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.#ctor(`3)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.#ctor(`4)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0})">
            <summary>
            Gets a type that each type of Either can transform to.
            <para>Only one function will be invoked depending on what type is internally stored.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.op_Implicit(`0)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.op_Implicit(`1)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.op_Implicit(`2)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.op_Implicit(`3)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.op_Implicit(`4)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`5.ToString">
            <summary>Returns the underlying type's value's string representation.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Either`6">
            <summary>
            This type holds a single instance of a selection of types.
            <para>While Either can take on more than one type, it is only ever a single type at a time.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.#ctor(`0)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.#ctor(`1)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.#ctor(`2)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.#ctor(`3)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.#ctor(`4)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.#ctor(`5)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0})">
            <summary>
            Gets a type that each type of Either can transform to.
            <para>Only one function will be invoked depending on what type is internally stored.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.op_Implicit(`0)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.op_Implicit(`1)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.op_Implicit(`2)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.op_Implicit(`3)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.op_Implicit(`4)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.op_Implicit(`5)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`6.ToString">
            <summary>Returns the underlying type's value's string representation.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Either`7">
            <summary>
            This type holds a single instance of a selection of types.
            <para>While Either can take on more than one type, it is only ever a single type at a time.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.#ctor(`0)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.#ctor(`1)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.#ctor(`2)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.#ctor(`3)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.#ctor(`4)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.#ctor(`5)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.#ctor(`6)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0})">
            <summary>
            Gets a type that each type of Either can transform to.
            <para>Only one function will be invoked depending on what type is internally stored.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.op_Implicit(`0)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.op_Implicit(`1)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.op_Implicit(`2)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.op_Implicit(`3)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.op_Implicit(`4)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.op_Implicit(`5)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.op_Implicit(`6)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`7.ToString">
            <summary>Returns the underlying type's value's string representation.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Either`8">
            <summary>
            This type holds a single instance of a selection of types.
            <para>While Either can take on more than one type, it is only ever a single type at a time.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.#ctor(`0)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.#ctor(`1)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.#ctor(`2)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.#ctor(`3)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.#ctor(`4)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.#ctor(`5)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.#ctor(`6)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.#ctor(`7)">
            <summary>A container that internally holds one, of many possible types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.Match``1(System.Func{`0,``0},System.Func{`1,``0},System.Func{`2,``0},System.Func{`3,``0},System.Func{`4,``0},System.Func{`5,``0},System.Func{`6,``0},System.Func{`7,``0})">
            <summary>
            Gets a type that each type of Either can transform to.
            <para>Only one function will be invoked depending on what type is internally stored.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.op_Implicit(`0)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.op_Implicit(`1)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.op_Implicit(`2)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.op_Implicit(`3)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.op_Implicit(`4)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.op_Implicit(`5)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.op_Implicit(`6)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.op_Implicit(`7)~ContainerExpressions.Containers.Either{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary>Sets the current internal type to that of the value.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Either`8.ToString">
            <summary>Returns the underlying type's value's string representation.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.ResponseExtensions">
            <summary>Utility methods for the Response Container.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.WithValue``1(ContainerExpressions.Containers.Response{``0},``0)">
            <summary>Creates a valid container response.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.AsValid(ContainerExpressions.Containers.Response)">
            <summary>Create a response container in an valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.Bind``2(ContainerExpressions.Containers.Response{``0},System.Func{``0,ContainerExpressions.Containers.Response{``1}})">
            <summary>Executes the bind func only if the input Response is valid, otherwise an invalid response is returned.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.BindAsync``2(ContainerExpressions.Containers.Response{``0},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}})">
            <summary>Executes the bind func only if the input Response is valid, otherwise an invalid response is returned.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.BindAsync``2(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}})">
            <summary>Executes the bind func only if the input Response is valid, otherwise an invalid response is returned.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.GetValueOrDefault``1(ContainerExpressions.Containers.Response{``0},``0)">
            <summary>Gets the value, unless the state is invalid, then the default value is returned.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.Transform``2(ContainerExpressions.Containers.Response{``0},System.Func{``0,``1})">
            <summary>Map the underlying Response type, to another type.</summary>
            <typeparam name="T">The type of the input response.</typeparam>
            <typeparam name="TResult">The type of the output response.</typeparam>
            <param name="response">The result of the last ran code.</param>
            <param name="func">An error free function that maps one type to another.</param>
            <returns>The mapped response, or an invalid response if the input was in an invalid state.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.Transform``3(System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,``2})">
            <summary>Map the underlying Response type, to another type.</summary>
            <typeparam name="T1">The type of the input response.</typeparam>
            <typeparam name="T2">The type of the output response.</typeparam>
            <typeparam name="TResult">The output type of the transform function.</typeparam>
            <param name="term">The result of the last ran code.</param>
            <param name="func">An error free function that maps one type to another.</param>
            <returns>The mapped response, or an invalid response if the input was in an invalid state.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.TransformAsync``2(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Func{``0,``1})">
            <summary>Map the underlying Response type, to another type.</summary>
            <typeparam name="T">The type of the input response.</typeparam>
            <typeparam name="TResult">The type of the output response.</typeparam>
            <param name="response">The result of the last ran code.</param>
            <param name="func">An error free function that maps one type to another.</param>
            <returns>The mapped response, or an invalid response if the input was in an invalid state.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.TransformAsync``3(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,``2})">
            <summary>Map the underlying Response type, to another type.</summary>
            <typeparam name="T1">The type of the input response.</typeparam>
            <typeparam name="T2">The type of the output response.</typeparam>
            <typeparam name="TResult">The output type of the transform function.</typeparam>
            <param name="term">The result of the last ran code.</param>
            <param name="func">An error free function that maps one type to another.</param>
            <returns>The mapped response, or an invalid response if the input was in an invalid state.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.Pivot``2(ContainerExpressions.Containers.Response{``0},System.Boolean,System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``0,ContainerExpressions.Containers.Response{``1}})">
            <summary>
            Executes one of the functions when the input response is valid, otherwise an invalid response is returned.
            <para>When the condition is true the first function is executed, otherwise the second function is executed.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.PivotAsync``2(ContainerExpressions.Containers.Response{``0},System.Boolean,System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}})">
            <summary>
            Executes one of the functions when the input response is valid, otherwise an invalid response is returned.
            <para>When the condition is true the first function is executed, otherwise the second function is executed.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.PivotAsync``2(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Boolean,System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}})">
            <summary>
            Executes one of the functions when the input response is valid, otherwise an invalid response is returned.
            <para>When the condition is true the first function is executed, otherwise the second function is executed.</para>
            </summary>
        </member>
        <member name="M:ContainerExpressions.Containers.ResponseExtensions.IsTrue``1(ContainerExpressions.Containers.Response{``0},System.Func{``0,System.Boolean})">
            <summary>When the Response is in a valid state the Func's result is returned, otherwise false is returned.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.RetryExtensions">
            <summary>Utility methods for the Retry Container.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.RetryExtensions.Retry``1(System.Func{ContainerExpressions.Containers.Response{``0}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.RetryExtensions.Retry``1(System.Func{ContainerExpressions.Containers.Response{``0}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.RetryExtensions.Retry``2(System.Func{``0,ContainerExpressions.Containers.Response{``1}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.RetryExtensions.Retry``2(System.Func{``0,ContainerExpressions.Containers.Response{``1}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.RetryExtensions.RetryAsync``1(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.RetryExtensions.RetryAsync``1(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.RetryExtensions.RetryAsync``2(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.RetryExtensions.RetryAsync``2(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.TraceAsyncExtensions">
            <summary>Extensions for the Trace Container.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response},System.String,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace when the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``1(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``1(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Func{``0,System.String})">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``1(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Func{``0,System.String},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace when the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``1(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.String,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace when the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``1(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``1(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.String,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``1(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.String})">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``1(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.String},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``2(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``2(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.String,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``2(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.String})">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``2(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.String},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``2(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``0,``1,System.String})">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceAsyncExtensions.LogAsync``2(System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``0,``1,System.String},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="T:ContainerExpressions.Containers.TraceExtensions">
            <summary>Extensions for the Trace Container.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log(ContainerExpressions.Containers.Response,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log(ContainerExpressions.Containers.Response,System.String,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace when the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``1(ContainerExpressions.Containers.Response{``0},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``1(ContainerExpressions.Containers.Response{``0},System.Func{``0,System.String})">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``1(ContainerExpressions.Containers.Response{``0},System.Func{``0,System.String},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace when the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``1(ContainerExpressions.Containers.Response{``0},System.String,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="response">The Response Container.</param>
            <param name="success">The message to trace when the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``1(System.Func{ContainerExpressions.Containers.Response{``0}},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``1(System.Func{ContainerExpressions.Containers.Response{``0}},System.String,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``1(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,System.String})">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``1(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,System.String},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``2(System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``2(System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.String,System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``2(System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,System.String})">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``2(System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,System.String},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``2(System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``0,``1,System.String})">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="M:ContainerExpressions.Containers.TraceExtensions.Log``2(System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``0,``1,System.String},System.String)">
            <summary>Logs a trace step.</summary>
            <param name="func">A function to the Response Container.</param>
            <param name="success">The message to trace of the response is in a valid state.</param>
            <param name="fail">The message to trace when the response is in an invalid state.</param>
            <returns>The same response from the input.</returns>
        </member>
        <member name="T:ContainerExpressions.Containers.Later`1">
            <summary>Loads the value only once, the first time it's accessed.</summary>
        </member>
        <member name="P:ContainerExpressions.Containers.Later`1.Value">
            <summary>Gets the value form the function, if this is the first time the value is read, the function will be invoked.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Later`1.#ctor(System.Func{`0})">
            <summary>Loads the value only once, the first time it's accessed.</summary>
            <param name="func">A function that will be called once (and only once) to generate a value.</param>
        </member>
        <member name="M:ContainerExpressions.Containers.Later`1.op_Implicit(ContainerExpressions.Containers.Later{`0})~`0">
            <summary>When compared to T, the underlying value is returned.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Later">
            <summary>A helper class for the Later generic class.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Later.Create``1(System.Func{``0})">
            <summary>Creates a Later container for the value generating function.</summary>
            <typeparam name="T">The type the generating function returns.</typeparam>
            <param name="func">A function that will be called once (and only once) to generate a value.</param>
            <returns></returns>
        </member>
        <member name="M:ContainerExpressions.Containers.Later.CreateAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Loads the value only once in a thread safe way, the first time it's accessed.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.LaterAsync`1">
            <summary>Loads the value only once in a thread safe way, the first time it's accessed.</summary>
        </member>
        <member name="P:ContainerExpressions.Containers.LaterAsync`1.Value">
            <summary>Gets the value form the function, if this is the first time the value is read, the function will be invoked (in a thread-safe manner).</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.LaterAsync`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>Loads the value only once in a thread safe way, the first time it's accessed.</summary>
            <param name="func">A function that will be called once (and only once) to generate a value.</param>
        </member>
        <member name="M:ContainerExpressions.Containers.LaterAsync`1.op_Implicit(ContainerExpressions.Containers.LaterAsync{`0})~System.Threading.Tasks.Task{`0}">
            <summary>When compared to T, the underlying Task is returned.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Response`1">
            <summary>
            A wrapper around the real value a method will return.
            <para>Using this pattern you can tell if a returned value is the correct one, or if some error happened trying to get the real value.</para>
            </summary>
            <typeparam name="T">The value to return.</typeparam>
        </member>
        <member name="P:ContainerExpressions.Containers.Response`1.IsValid">
            <summary>True if the value was set correctly, false if some error occurred getting the value.</summary>
        </member>
        <member name="P:ContainerExpressions.Containers.Response`1.Value">
            <summary>The value that was calculated, with the guarantee it's in a valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response`1.#ctor(`0)">
            <summary>Create a response container in a valid state.</summary>
            <param name="value">The response's value.</param>
        </member>
        <member name="M:ContainerExpressions.Containers.Response`1.op_Implicit(ContainerExpressions.Containers.Response{`0})~System.Boolean">
            <summary>When compared to a bool, the IsValid property value will be used.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response`1.op_Implicit(ContainerExpressions.Containers.Response{`0})~`0">
            <summary>When compared to T, the Value property will be used.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response`1.op_Implicit(ContainerExpressions.Containers.Response{`0})~ContainerExpressions.Containers.Response">
            <summary>When compared to Response, the IsValid property will be used to create the response model.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response`1.ToString">
            <summary>Returns the underlying value's string representation.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Response">
            <summary>A helper class for the Response generic class.</summary>
        </member>
        <member name="P:ContainerExpressions.Containers.Response.IsValid">
            <summary>True if the container is in a valid state, otherwise the operation didn't run successfully.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response.#ctor(System.Boolean)">
            <summary>Create a response container in an valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response.Create``1(``0)">
            <summary>Create a response container in a valid state.</summary>
            <param name="value">The response's value.</param>
        </member>
        <member name="M:ContainerExpressions.Containers.Response.Lift``1(System.Func{``0})">
            <summary>Turn a function that doesn't return a Response, into one that does.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response.Lift``2(System.Func{``0,``1})">
            <summary>Turn a function that doesn't return a Response, into one that does.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response.LiftAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Turn a function that doesn't return a Response, into one that does.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response.LiftAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>Turn an async function that doesn't return a task Response, into one that does.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response.op_Implicit(ContainerExpressions.Containers.Response)~System.Boolean">
            <summary>When compared to a bool, the IsValid properties value will be used.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Response.ToString">
            <summary>Gets the string value for if this response is valid or not.</summary>
            <returns>The bool string value for the IsValid Property.</returns>
        </member>
        <member name="T:ContainerExpressions.Containers.Retry">
            <summary>Keep retrying a function until is succeeds, or the number of allowed retries is exceeded.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.Execute(System.Func{ContainerExpressions.Containers.Response})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.Execute(System.Func{ContainerExpressions.Containers.Response},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.Execute``1(System.Func{ContainerExpressions.Containers.Response{``0}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.Execute``1(System.Func{ContainerExpressions.Containers.Response{``0}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.Execute``2(``0,System.Func{``0,ContainerExpressions.Containers.Response{``1}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.Execute``2(``0,System.Func{``0,ContainerExpressions.Containers.Response{``1}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.ExecuteAsync(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.ExecuteAsync(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.ExecuteAsync``2(``0,System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}})">
            <summary>Execute a function, and retries (using default values) if the Response is invalid.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Retry.ExecuteAsync``2(``0,System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},ContainerExpressions.Expressions.Models.RetryOptions)">
            <summary>Execute a function, and retries (using custom values) if the Response is invalid.</summary>
        </member>
        <member name="T:ContainerExpressions.Containers.Trace">
            <summary>Logs the result, and output of Response types.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Trace.SetLogger(System.Action{System.String})">
            <summary>
            Set your desired logger implementation here.
            <para>It is recommend that the logger be stateless.</para>
            </summary>
            <param name="logger">A function that will log the incoming message.</param>
        </member>
        <member name="T:ContainerExpressions.Containers.Try">
            <summary>Wraps a function in error protecting code.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Try.SetExceptionLogger(System.Action{System.Exception})">
            <summary>If you'd like to log errors as they come, add your stateless error logger here, if a logger already exists, it'll be overwritten.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Try.Run(System.Action)">
            <summary>Wraps a function in error protecting code.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Try.Run``1(System.Func{``0})">
            <summary>Wraps a function in error protecting code.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Try.RunAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>Wraps a function in error protecting code.</summary>
        </member>
        <member name="M:ContainerExpressions.Containers.Try.RunAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>Wraps a function in error protecting code.</summary>
        </member>
        <member name="T:ContainerExpressions.Expressions.Expression">
            <summary>Entry class for using Expressions.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Reduce``1(System.Func{``0,``0,``0},``0,ContainerExpressions.Containers.Response{``0}[])">
            <summary>Reduce many values of T, into a single value of T.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ReduceAsync``1(System.Func{``0,``0,``0},``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}[])">
            <summary>Reduce many values of T, into a single value of T.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ReduceAsync``1(System.Func{``0,``0,``0},System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}[])">
            <summary>Reduce many values of T, into a single value of T.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Funnel``3(ContainerExpressions.Containers.Response{``0},ContainerExpressions.Containers.Response{``1},System.Func{``0,``1,``2})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Funnel``4(ContainerExpressions.Containers.Response{``0},ContainerExpressions.Containers.Response{``1},ContainerExpressions.Containers.Response{``2},System.Func{``0,``1,``2,``3})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Funnel``5(ContainerExpressions.Containers.Response{``0},ContainerExpressions.Containers.Response{``1},ContainerExpressions.Containers.Response{``2},ContainerExpressions.Containers.Response{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Funnel``6(ContainerExpressions.Containers.Response{``0},ContainerExpressions.Containers.Response{``1},ContainerExpressions.Containers.Response{``2},ContainerExpressions.Containers.Response{``3},ContainerExpressions.Containers.Response{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Funnel``7(ContainerExpressions.Containers.Response{``0},ContainerExpressions.Containers.Response{``1},ContainerExpressions.Containers.Response{``2},ContainerExpressions.Containers.Response{``3},ContainerExpressions.Containers.Response{``4},ContainerExpressions.Containers.Response{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Funnel``8(ContainerExpressions.Containers.Response{``0},ContainerExpressions.Containers.Response{``1},ContainerExpressions.Containers.Response{``2},ContainerExpressions.Containers.Response{``3},ContainerExpressions.Containers.Response{``4},ContainerExpressions.Containers.Response{``5},ContainerExpressions.Containers.Response{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Funnel``9(ContainerExpressions.Containers.Response{``0},ContainerExpressions.Containers.Response{``1},ContainerExpressions.Containers.Response{``2},ContainerExpressions.Containers.Response{``3},ContainerExpressions.Containers.Response{``4},ContainerExpressions.Containers.Response{``5},ContainerExpressions.Containers.Response{``6},ContainerExpressions.Containers.Response{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.FunnelAsync``3(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}},System.Func{``0,``1,``2})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state, all tasks are ran at the same time, not one after another.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.FunnelAsync``4(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}},System.Func{``0,``1,``2,``3})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state, all tasks are ran at the same time, not one after another.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.FunnelAsync``5(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state, all tasks are ran at the same time, not one after another.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.FunnelAsync``6(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state, all tasks are ran at the same time, not one after another.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.FunnelAsync``7(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state, all tasks are ran at the same time, not one after another.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.FunnelAsync``8(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``5}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state, all tasks are ran at the same time, not one after another.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.FunnelAsync``9(System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``5}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``6}},System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``7}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>Takes multiple Response types, and passes the results to the final function only if all Response types are in a valid state, all tasks are ran at the same time, not one after another.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Compose``2(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,ContainerExpressions.Containers.Response{``1}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Compose``3(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,ContainerExpressions.Containers.Response{``2}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Compose``4(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,ContainerExpressions.Containers.Response{``2}},System.Func{``2,ContainerExpressions.Containers.Response{``3}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Compose``5(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,ContainerExpressions.Containers.Response{``2}},System.Func{``2,ContainerExpressions.Containers.Response{``3}},System.Func{``3,ContainerExpressions.Containers.Response{``4}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Compose``6(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,ContainerExpressions.Containers.Response{``2}},System.Func{``2,ContainerExpressions.Containers.Response{``3}},System.Func{``3,ContainerExpressions.Containers.Response{``4}},System.Func{``4,ContainerExpressions.Containers.Response{``5}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Compose``7(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,ContainerExpressions.Containers.Response{``2}},System.Func{``2,ContainerExpressions.Containers.Response{``3}},System.Func{``3,ContainerExpressions.Containers.Response{``4}},System.Func{``4,ContainerExpressions.Containers.Response{``5}},System.Func{``5,ContainerExpressions.Containers.Response{``6}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Compose``8(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,ContainerExpressions.Containers.Response{``2}},System.Func{``2,ContainerExpressions.Containers.Response{``3}},System.Func{``3,ContainerExpressions.Containers.Response{``4}},System.Func{``4,ContainerExpressions.Containers.Response{``5}},System.Func{``5,ContainerExpressions.Containers.Response{``6}},System.Func{``6,ContainerExpressions.Containers.Response{``7}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Compose``9(System.Func{ContainerExpressions.Containers.Response{``0}},System.Func{``0,ContainerExpressions.Containers.Response{``1}},System.Func{``1,ContainerExpressions.Containers.Response{``2}},System.Func{``2,ContainerExpressions.Containers.Response{``3}},System.Func{``3,ContainerExpressions.Containers.Response{``4}},System.Func{``4,ContainerExpressions.Containers.Response{``5}},System.Func{``5,ContainerExpressions.Containers.Response{``6}},System.Func{``6,ContainerExpressions.Containers.Response{``7}},System.Func{``7,ContainerExpressions.Containers.Response{``8}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ComposeAsync``2(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ComposeAsync``3(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ComposeAsync``4(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}}},System.Func{``2,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ComposeAsync``5(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}}},System.Func{``2,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}}},System.Func{``3,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ComposeAsync``6(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}}},System.Func{``2,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}}},System.Func{``3,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}}},System.Func{``4,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``5}}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ComposeAsync``7(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}}},System.Func{``2,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}}},System.Func{``3,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}}},System.Func{``4,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``5}}},System.Func{``5,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``6}}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ComposeAsync``8(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}}},System.Func{``2,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}}},System.Func{``3,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}}},System.Func{``4,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``5}}},System.Func{``5,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``6}}},System.Func{``6,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``7}}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.ComposeAsync``9(System.Func{System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``0}}},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}},System.Func{``1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}}},System.Func{``2,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``3}}},System.Func{``3,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``4}}},System.Func{``4,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``5}}},System.Func{``5,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``6}}},System.Func{``6,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``7}}},System.Func{``7,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``8}}})">
            <summary>Compose functions by giving the output of the first function, to the input of the second function.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``2(``0,ContainerExpressions.Expressions.Models.Pattern{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``2(``0,ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``2(``0,ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``2(``0,ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``2(``0,ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``2(``0,ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``2(``0,ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``2(``0,ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1},ContainerExpressions.Expressions.Models.Pattern{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``3(``0,``1,ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``3(``0,``1,ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``3(``0,``1,ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``3(``0,``1,ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``3(``0,``1,ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``3(``0,``1,ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``3(``0,``1,ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.Match``3(``0,``1,ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2},ContainerExpressions.Expressions.Models.Pattern{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``2(``0,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``2(``0,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``2(``0,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``2(``0,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``2(``0,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``2(``0,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``2(``0,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``2(``0,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1})">
            <summary>Invoke a function if the input patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``3(``0,``1,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``3(``0,``1,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``3(``0,``1,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``3(``0,``1,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``3(``0,``1,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``3(``0,``1,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``3(``0,``1,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Expression.MatchAsync``3(``0,``1,ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2},ContainerExpressions.Expressions.Models.PatternAsync{``0,``1,``2})">
            <summary>Invoke a function if the pivot patten (some external variable) matches.</summary>
        </member>
        <member name="T:ContainerExpressions.Expressions.Models.Pattern`2">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern`2.#ctor(System.Func{`0,System.Boolean},System.Func{`0,ContainerExpressions.Containers.Response{`1}})">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern`2.Evaluate(`0)">
            <summary>Returns true if this patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern`2.Execute(`0)">
            <summary>Invokes the function matching the pattern.</summary>
        </member>
        <member name="T:ContainerExpressions.Expressions.Models.Pattern`3">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern`3.#ctor(System.Func{`0,System.Boolean},System.Func{`1,ContainerExpressions.Containers.Response{`2}})">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern`3.Evaluate(`0)">
            <summary>Returns true if this patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern`3.Execute(`1)">
            <summary>Invokes the function matching the pattern.</summary>
        </member>
        <member name="T:ContainerExpressions.Expressions.Models.Pattern">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern.Create``2(System.Func{``0,System.Boolean},System.Func{``0,ContainerExpressions.Containers.Response{``1}})">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern.Create``3(System.Func{``0,System.Boolean},System.Func{``1,ContainerExpressions.Containers.Response{``2}})">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern.CreateAsync``2(System.Func{``0,System.Boolean},System.Func{``0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``1}}})">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.Pattern.CreateAsync``3(System.Func{``0,System.Boolean},System.Func{``1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{``2}}})">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="T:ContainerExpressions.Expressions.Models.PatternAsync`2">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.PatternAsync`2.#ctor(System.Func{`0,System.Boolean},System.Func{`0,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{`1}}})">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.PatternAsync`2.Evaluate(`0)">
            <summary>Returns true if this patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.PatternAsync`2.Execute(`0)">
            <summary>Invokes the function matching the pattern.</summary>
        </member>
        <member name="T:ContainerExpressions.Expressions.Models.PatternAsync`3">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.PatternAsync`3.#ctor(System.Func{`0,System.Boolean},System.Func{`1,System.Threading.Tasks.Task{ContainerExpressions.Containers.Response{`2}}})">
            <summary>Defines an input matcher, and a function to run, if that pattern matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.PatternAsync`3.Evaluate(`0)">
            <summary>Returns true if this patten matches.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.PatternAsync`3.Execute(`1)">
            <summary>Invokes the function matching the pattern.</summary>
        </member>
        <member name="T:ContainerExpressions.Expressions.Models.RetryOptions">
            <summary>Function replay, and cooldown options.</summary>
        </member>
        <member name="P:ContainerExpressions.Expressions.Models.RetryOptions.Retries">
            <summary>The number of times to retry the function.</summary>
        </member>
        <member name="P:ContainerExpressions.Expressions.Models.RetryOptions.MillisecondsDelay">
            <summary>The amount of time to wait between calling the function again.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.RetryOptions.#ctor(System.Int32,System.Int32)">
            <summary>Function replay, and cooldown options.</summary>
            <param name="retries">The number of retries to make before giving up.</param>
            <param name="millisecondsDelay">The time to wait in milliseconds before trying another attempt.</param>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.RetryOptions.Create">
            <summary>Creates RetryOptions with sensible default values.</summary>
        </member>
        <member name="M:ContainerExpressions.Expressions.Models.RetryOptions.Create(System.Int32,System.Int32)">
            <summary>>Creates RetryOptions with custom values</summary>
            <param name="retries">The number of times to retry the function.</param>
            <param name="millisecondsDelay">The amount of time to wait between calling the function again</param>
        </member>
    </members>
</doc>
