<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
	<LangVersion>latestMajor</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup>
    <PackageOutputPath>..//../nupkg</PackageOutputPath>
    <id>ContainerExpressions</id>
    <Authors>Matthew Dove</Authors>
    <Version>10.0.0</Version>
    <Copyright>Matthew Dove. All rights reserved.</Copyright>
    <PackageLicenseExpression></PackageLicenseExpression>
    <RepositoryUrl>https://github.com/Matthew-Dove/ContainerExpressions</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageProjectUrl>https://github.com/Matthew-Dove/ContainerExpressions</PackageProjectUrl>
    <Title>Container Expressions</Title>
    <Description>ContainerExpressions provides generic abstractions to remove boilerplate code needed by all programs.

Containers have some utility that extends the underlying type (any T).
Expressions are designed to work on top of containers, helping in common use cases; or quality of life when connecting code together.

For example the Response container's "utility" is to let the caller know if some T value was generated without error.
The expression Retry will attempt to get the T value after x time delay for n attempts, a good combo for intermittent networking errors.</Description>
    <PackageReleaseNotes>* Renamed `Cache` to `Instance`, as the former name lead to confusion on what the container did.
* Added custom awaiters for `Response` types wrapping `Task` / `ValueTask`.
* Created `ResponseTask` to make casting between `Task`, and `Response` easier (*`ResponseValueTask` is also available for `ValueTask` sources*).
* `ResponseAsync&lt;T&gt;` is a task-like type that can be used on `async` functions to catch, and log exceptions thrown in a method.
* Added async method builders for `Task`, and `ValueTask` to safely create `Response` types.
* Added a value type verion of `Later&lt;T&gt;` - `ValueLater&lt;T&gt;`.
* `Maybe&lt;TValue&gt;`, and `Maybe&lt;TValue, TError&gt;` now have a method  `TryGetAggregateErrors`, which provides easy access to the aggregate errors (*should they exist*).
* `Maybe&lt;TValue&gt;`, and `Maybe&lt;TValue, TError&gt;` now have a method  `TryGetAllErrors`, which provides easy access all errors - top level and aggregate (*should they exist*).
* Added `TryGetT*` to the `Either&lt;T*&gt;` containers. To retrieve the value if it's present.
* Added `WhenT*` to the `Either&lt;T*&gt;` containers. Execute a `Func`, or `Action` on the value if it's present.
* Added an `Action` overload to the `Match` method for the `Either&lt;T*&gt;` containers.
* `Async` versions for the `TryGetT*`, `WhenT*`, and `Match` methods on the `Either&lt;T*&gt;` containers.
* Renamed `A&lt;T&gt;` to `ValueAlias&lt;T&gt;`, which follows the .net naming conventions of value types.
* Added Caller Attributes to the `Try` container, and error logging functions, to provide more context.</PackageReleaseNotes>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <PackageIcon>dove.png</PackageIcon>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <ImplicitUsings>disable</ImplicitUsings>
    <GeneratePackageOnBuild>False</GeneratePackageOnBuild>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PackageTags>containers;functional;types</PackageTags>
    <PackageId>ContainerExpressions</PackageId>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <Nullable>disable</Nullable>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>1701;1702;1591;1573;1587</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <NoWarn>1701;1702;1591;1573;1587</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Expressions\Core\" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\images\dove.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\..\LICENSE.txt">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.5.4" />
  </ItemGroup>

</Project>
