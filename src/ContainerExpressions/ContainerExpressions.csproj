<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
	<LangVersion>latestMajor</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup>
    <PackageOutputPath>..//../nupkg</PackageOutputPath>
    <id>ContainerExpressions</id>
    <Authors>Matthew Dove</Authors>
    <Version>9.0.0</Version>
    <Copyright>Matthew Dove. All rights reserved.</Copyright>
    <PackageLicenseExpression></PackageLicenseExpression>
    <RepositoryUrl>https://github.com/Matthew-Dove/ContainerExpressions</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageProjectUrl>https://github.com/Matthew-Dove/ContainerExpressions</PackageProjectUrl>
    <Title>Container Expressions</Title>
    <Description>ContainerExpressions provides generic abstractions to remove boilerplate code needed by all programs.

Containers have some utility that extends the underlying type (any T).
Expressions are designed to work on top of containers, helping in common use cases; or quality of life when connecting code together.

For example the Response container's "utility" is to let the caller know if some T value was generated without error.
The expression Retry will attempt to get the T value after x time delay for n attempts, a good combo for intermittent networking errors.</Description>
    <PackageReleaseNotes>&gt; Updated additional **Pack** details in the solution file (*debug symbols, xml comments, readme file, etc*).
&gt; New extension method for `Response`, and `Response&lt;T&gt;` types (*both sync, and async*) called `Unpack()` - which flattens response containers.
&gt; When `Try.SetExceptionLogger()` is configured, exceptions logged though `LogError()` - or found in `Response`, and `Maybe` containers, are sent though.
&gt; Added a `LogError` extension method, so you can which forwards exceptions to the logger setup for: `Try.SetExceptionLogger`.
&gt; Expanded the function targets for `Funnel`. Was only `T`, now includes: `Response&lt;T&gt;`, `Task&lt;T&gt;`, and `Task&lt;Response&lt;T&gt;&gt;`.
&gt; Added equals overloads to `Either`, so you can easily compare some `T` value to the `Either` container.
&gt; Added `TryGetT*` to `Either`, allowing access to the types without going though `Match&lt;TResult&gt;`.
&gt; Added a struct version of `Alias&lt;T&gt;` called `A&lt;T&gt;`.
&gt; Added shared types to resue in containers, such as `OK`, `BadRequest`, `Error`, etc.
&gt; Created shared common lambda functions, such as `Lambda.Identity` to reflect the input as the output. i.e. instead of having to write `(x =&gt; x)`.
&gt; Added `TryGetValue()`, and `TryGetError()` to `Maybe`.
&gt; Added `Unpack` to `Maybe`.
&gt; Created a new container `Cache:` store readonly default values for reference types (*i.e. instead of using null*).</PackageReleaseNotes>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <PackageIcon>dove.png</PackageIcon>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <ImplicitUsings>disable</ImplicitUsings>
    <GeneratePackageOnBuild>False</GeneratePackageOnBuild>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PackageTags>containers;functional;types</PackageTags>
    <PackageId>ContainerExpressions</PackageId>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>1701;1702;1591;1573</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <NoWarn>1701;1702;1591;1573</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Expressions\Core\" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\images\dove.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\..\LICENSE.txt">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

</Project>
