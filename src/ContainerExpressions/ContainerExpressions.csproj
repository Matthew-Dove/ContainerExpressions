<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
	<LangVersion>latestMajor</LangVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup>
    <PackageOutputPath>..//../nupkg</PackageOutputPath>
    <id>ContainerExpressions</id>
    <Authors>Matthew Dove</Authors>
    <Version>13.0.0</Version>
    <Copyright>Matthew Dove. All rights reserved.</Copyright>
    <PackageLicenseExpression></PackageLicenseExpression>
    <RepositoryUrl>https://github.com/Matthew-Dove/ContainerExpressions</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageProjectUrl>https://github.com/Matthew-Dove/ContainerExpressions</PackageProjectUrl>
    <Title>Container Expressions</Title>
    <Description>ContainerExpressions provides generic abstractions to remove boilerplate code needed by all programs.

Containers have some utility that extends the underlying type (any T).
Expressions are designed to work on top of containers, helping in common use cases; or quality of life when connecting code together.

For example the Response container's "utility" is to let the caller know if some T value was generated without error.
The expression Retry will attempt to get the T value after x time delay for n attempts, a good combo for intermittent networking errors.</Description>
    <PackageReleaseNotes>Small QOL fixes on some of the container types.

* Removed default types being added in `Instance`'s static ctor, leaving the allocations up to the user in program start up.
* Renamed `Lambda.Identity&lt;T&gt;` to `Lambda.Throw&lt;T&gt;`, as the method throws exceptions, it does not return the type's identity as the original name implied.
* Added `ThrowIfAsync&lt;T&gt;` overloads to `GuardExtensions`, so you can run predicates on `Task&lt;T&gt;` method arguments.
* Added `AsResponse()` overload for `ResponseAsync&lt;T&gt;`, such that you can cast to a `Task&lt;Response&lt;T&gt;&gt;`, and use all existing extension methods for that type.</PackageReleaseNotes>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <PackageIcon>dove.png</PackageIcon>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <ImplicitUsings>disable</ImplicitUsings>
    <GeneratePackageOnBuild>False</GeneratePackageOnBuild>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PackageTags>containers;functional;types</PackageTags>
    <PackageId>ContainerExpressions</PackageId>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <Nullable>disable</Nullable>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>1701;1702;1591;1573;1587</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <NoWarn>1701;1702;1591;1573;1587</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Expressions\Core\" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\images\dove.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\..\LICENSE.txt">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.6.2" />
  </ItemGroup>

</Project>
